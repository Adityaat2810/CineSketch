generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  username     String     @unique
  email        String     @unique
  passwordHash String
  avatarUrl    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  gameRooms    GameRoom[] @relation("OwnedRooms")
  joinedRooms  Player[]
  guesses      Guess[]
}

enum StatusType {
  ACTIVE
  COMPLETED
}

model GameRoom {
  id        String     @id @default(uuid())
  name      String
  ownerId   String
  profile   User       @relation("OwnedRooms", fields: [ownerId], references: [id], onDelete: Cascade)
  status    StatusType @default(ACTIVE) // e.g., "active", "completed"
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  players   Player[]
  guesses   Guess[]

  @@index([ownerId])
}

model Player {
  id        String     @id @default(uuid())
  userId    String
  gameRoomId String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameRoom  GameRoom   @relation(fields: [gameRoomId], references: [id], onDelete: Cascade)
  joinedAt  DateTime   @default(now())

  @@unique([userId, gameRoomId])
}

model Guess {
  id        String     @id @default(uuid())
  content   String
  userId    String
  gameRoomId String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameRoom  GameRoom   @relation(fields: [gameRoomId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@index([userId])
  @@index([gameRoomId])
}
